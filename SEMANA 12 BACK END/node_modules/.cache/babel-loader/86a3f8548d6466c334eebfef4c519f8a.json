{"ast":null,"code":"var _jsxFileName = \"/Users/nr/Desktop/ESTUDIOS/Cosas curso Adalab NR drive NRM/mod react/modulo-3-leccion-2.4-ejercicio-01-El contador/src/components/App.js\",\n    _s = $RefreshSig$();\n\nimport '../styles/App.css'; // Fichero src/components/App.js\n// Importamos useState desde React porque lo vamos a necesitar más abajo\n\nimport { useState } from 'react'; // Creamos la función o componente App. Lo creamos con una función arrow.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  // Creamos la constante de estado numberA y la función para modificarla setNumberA.\n  // El valor inicial que va a tener numberA es 0.\n  const [numberA, setNumberA] = useState(0); // Creamos una función manejadora que se ejecutará cuando se cambie el input del primer número.\n\n  const handleNumberA = ev => {\n    // Cogemos el valor del input del primer número.\n    const inputValue = ev.target.value; // Ejecutamos la función setNumberA para actualizar el valor del estado numberA.\n    // Cuando ejecutamos la función setNumberA, React guarda el valor del input en la constante numberA y re-renderiza la página.\n    // Esta función no la hemos creado nosotras, nos la ha creado React al utilizar el useState.\n\n    setNumberA(inputValue);\n  }; // Creamos la constante total con la suma de los dos números.\n  // Esta línea de código es JS normal y corriente, no tiene nada que ver con React.\n\n\n  const total = parseInt(numberA); // Retornamos todo el código HTML que queremos que React pinte en la página.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Contador: 0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Escribe un n\\xFAmero:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"name\",\n          onChange: handleInput\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"O00onyGuEnBivSvqGKco5wNvEpE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/nr/Desktop/ESTUDIOS/Cosas curso Adalab NR drive NRM/mod react/modulo-3-leccion-2.4-ejercicio-01-El contador/src/components/App.js"],"names":["useState","App","numberA","setNumberA","handleNumberA","ev","inputValue","target","value","total","parseInt","handleInput"],"mappings":";;;AAAA,OAAO,mBAAP,C,CACA;AACA;;AACA,SAASA,QAAT,QAAyB,OAAzB,C,CAEA;;;;AACA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB;AACA;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBH,QAAQ,CAAC,CAAD,CAAtC,CAHgB,CAKhB;;AACA,QAAMI,aAAa,GAAIC,EAAD,IAAQ;AAC5B;AACA,UAAMC,UAAU,GAAGD,EAAE,CAACE,MAAH,CAAUC,KAA7B,CAF4B,CAG5B;AACA;AACA;;AACAL,IAAAA,UAAU,CAACG,UAAD,CAAV;AACD,GAPD,CANgB,CAehB;AACA;;;AACA,QAAMG,KAAK,GAAGC,QAAQ,CAACR,OAAD,CAAtB,CAjBgB,CAmBhB;;AACA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,6BACE;AAAA,yDAGE;AAAO,UAAA,IAAI,EAAC,QAAZ;AAAqB,UAAA,IAAI,EAAC,MAA1B;AAAiC,UAAA,QAAQ,EAAES;AAA3C;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CAhCD;;GAAMV,G;;KAAAA,G;AAkCN,eAAeA,GAAf","sourcesContent":["import '../styles/App.css';\n// Fichero src/components/App.js\n// Importamos useState desde React porque lo vamos a necesitar más abajo\nimport { useState } from 'react';\n\n// Creamos la función o componente App. Lo creamos con una función arrow.\nconst App = () => {\n  // Creamos la constante de estado numberA y la función para modificarla setNumberA.\n  // El valor inicial que va a tener numberA es 0.\n  const [numberA, setNumberA] = useState(0);\n\n  // Creamos una función manejadora que se ejecutará cuando se cambie el input del primer número.\n  const handleNumberA = (ev) => {\n    // Cogemos el valor del input del primer número.\n    const inputValue = ev.target.value;\n    // Ejecutamos la función setNumberA para actualizar el valor del estado numberA.\n    // Cuando ejecutamos la función setNumberA, React guarda el valor del input en la constante numberA y re-renderiza la página.\n    // Esta función no la hemos creado nosotras, nos la ha creado React al utilizar el useState.\n    setNumberA(inputValue);\n  };\n\n  // Creamos la constante total con la suma de los dos números.\n  // Esta línea de código es JS normal y corriente, no tiene nada que ver con React.\n  const total = parseInt(numberA);\n\n  // Retornamos todo el código HTML que queremos que React pinte en la página.\n  return (\n    <div>\n      <h1>Contador: 0</h1>\n      <form>\n        <label>\n          Escribe un número:\n          {/* En esta línea indicamos que cuando cambie el input se ejecute la función manejadora handleInput */}\n          <input type=\"number\" name=\"name\" onChange={handleInput} />\n        </label>\n      </form>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}